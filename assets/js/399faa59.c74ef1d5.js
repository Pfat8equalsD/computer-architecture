"use strict";(self.webpackChunkcomputer_architecture=self.webpackChunkcomputer_architecture||[]).push([[7254],{5680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>y});var i=t(6540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);r&&(i=i.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function u(e,r){if(null==e)return{};var t,i,a=function(e,r){if(null==e)return{};var t,i,a={},n=Object.keys(e);for(i=0;i<n.length;i++)t=n[i],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)t=n[i],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=i.createContext({}),c=function(e){var r=i.useContext(o),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=c(e.components);return i.createElement(o.Provider,{value:r},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return i.createElement(i.Fragment,{},r)}},f=i.forwardRef((function(e,r){var t=e.components,a=e.mdxType,n=e.originalType,o=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),s=c(t),f=a,y=s["".concat(o,".").concat(f)]||s[f]||m[f]||n;return t?i.createElement(y,l(l({ref:r},p),{},{components:t})):i.createElement(y,l({ref:r},p))}));function y(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var n=t.length,l=new Array(n);l[0]=f;var u={};for(var o in r)hasOwnProperty.call(r,o)&&(u[o]=r[o]);u.originalType=e,u[s]="string"==typeof e?e:a,l[1]=u;for(var c=2;c<n;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9403:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>n,metadata:()=>u,toc:()=>c});var i=t(8168),a=(t(6540),t(5680));const n={},l="Practice: Always",u={unversionedId:"Lab3 - Verilog/Always/Exercitii/README",id:"Lab3 - Verilog/Always/Exercitii/README",title:"Practice: Always",description:"- Implementa\u021bi \u0219i simula\u021bi un multiplicator pe 4 bi\u021bi f\u0103r\u0103 a folosi operatorul * (\xeenmul\u021bire).",source:"@site/docs/Lab3 - Verilog/Always/Exercitii/README.md",sourceDirName:"Lab3 - Verilog/Always/Exercitii",slug:"/Lab3 - Verilog/Always/Exercitii/",permalink:"/computer-architecture/Lab3 - Verilog/Always/Exercitii/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Blocul always@ edge-triggered",permalink:"/computer-architecture/Lab3 - Verilog/Always/Lectura/"},next:{title:"Debouncer",permalink:"/computer-architecture/Lab3 - Verilog/Debouncer/"}},o={},c=[],p={toc:c},s="wrapper";function m(e){let{components:r,...t}=e;return(0,a.yg)(s,(0,i.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"practice-always"},"Practice: Always"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Implementa\u021bi \u0219i simula\u021bi un multiplicator pe 4 bi\u021bi f\u0103r\u0103 a folosi operatorul * (\xeenmul\u021bire).\nHint: Folosi\u021bi conven\u021bia Verilog pentru interfa\u021ba modulului. C\xe2\u021bi bi\u021bi are ie\u0219irea?\nHint: \xcenmul\u021bi\u021bi pe h\xe2rtie, \xeen baza 2, numerele 1001 \u0219i 1011. Transpune\u021bi \xeen limbajul Verilog algoritmul folosit."),(0,a.yg)("li",{parentName:"ul"},"Implementa\u021bi \u0219i simula\u021bi un modul de afi\u0219aj cu 7 segmente pentru numere \xeen baza 10. Descrierea sumar\u0103 a func\u021bionalit\u0103\u021bii acestuia se poate reg\u0103si \xeen Anex\u0103.\nHint: Exist\u0103 o ie\u0219ire valid\u0103 pentru fiecare intrare? Nu uita\u021bi de cazul default.\nHint: Se vor testa doar cifrele de la 0 la 9."),(0,a.yg)("li",{parentName:"ul"},"Implementa\u021bi o unitate aritmetico-logic\u0103 simpl\u0103 (UAL), pe 4 bi\u021bi, cu 2 opera\u021bii: adunare \u0219i \xeenmul\u021bire. Folosi\u021bi o intrare de selec\u021bie de 1 bit pentru a alege \xeentre cele dou\u0103 opera\u021bii astfel: 0 - adunare, 1 - \xeenmul\u021bire.\nHint: Este necesar s\u0103 crea\u021bi un nou proiect. Se poate folosi tutorialul.\nHint: C\xe2\u021bi bi\u021bi au ie\u0219irea sumatorului \u0219i a multiplicatorului? Dar a UAL-ului?\nHint: Pentru selec\u021bia dintre ie\u0219irea sumatorului \u0219i cea a multiplicatorului se poate folosi atribuirea continu\u0103 sau se poate implementa un modul multiplexor 2:1\nHint: Pentru testarea UAL trebuie creat un scenariu de test, folosind tutorialul. Presupun\xe2nd c\u0103 sumatorul \u0219i multiplicatorul sunt testate temeinic la exerci\u021biile anterioare, crea\u021bi un scenariu relevant func\u021bion\u0103rii UAL-ului ca un ansamblu."),(0,a.yg)("li",{parentName:"ul"},"Pentru o utilizare mai general\u0103, implementa\u021bi un UAL cu operatori cu dimensiune variabil\u0103.\nHint: Pentru a-l implementa, este necesar\u0103 implementarea unui multiplicator parametrizat - aten\u021bie la dimensiunea semnalelor!")))}m.isMDXComponent=!0}}]);